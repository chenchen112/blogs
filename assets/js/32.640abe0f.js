(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{331:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"javascript-questions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-questions"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://github.com/lydiahallie/javascript-questions/blob/master/zh-CN/README-zh_CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javascript-questions"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("标签："),s("code",[t._v("Javascript")])]),t._v(" "),s("p",[t._v("发现一个 js 题库，记录一下易错题")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_9-输出是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-输出是什么"}},[t._v("#")]),t._v(" 9. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greeting\ngreetign "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Typo!")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greetign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("{}")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("ReferenceError: greetign is not defined")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("undefined")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-a"}},[t._v("#")]),t._v(" 答案： A")]),t._v(" "),s("p",[t._v("代码打印出了一个对象，这是因为我们在全局对象上创建了一个空对象！当我们将 "),s("code",[t._v("greeting")]),t._v(" 写错成 "),s("code",[t._v("greetign")]),t._v(" 时， JS 解释器实际在上浏览器中将它视为 "),s("code",[t._v("global.greetign = {}")]),t._v("（或者 "),s("code",[t._v("window.greetign = {}")]),t._v("）。")]),t._v(" "),s("p",[t._v('为了避免这个为题，我们可以使用 `"use strict"。这能确保当你声明变量时必须赋值。')]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_11-输出是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-输出是什么"}},[t._v("#")]),t._v(" 11. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("firstName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" firstName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lastName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" member "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Lydia"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hallie"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nPerson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getFullName")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("member"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFullName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("TypeError")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("SyntaxError")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("Lydia Hallie")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("undefined")]),t._v(" "),s("code",[t._v("undefined")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-a-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-a-2"}},[t._v("#")]),t._v(" 答案： A")]),t._v(" "),s("p",[t._v("你不能像常规对象那样，给构造函数添加属性。如果你想一次性给所有实例添加特性，你应该使用原型。因此本例中，使用如下方式：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getFullName")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这才会使 "),s("code",[t._v("member.getFullName()")]),t._v(" 起作用。为什么这么做有益的？假设我们将这个方法添加到构造函数本身里。也许不是每个 "),s("code",[t._v("Person")]),t._v(" 实例都需要这个方法。这将浪费大量内存空间，因为它们仍然具有该属性，这将占用每个实例的内存空间。相反，如果我们只将它添加到原型中，那么它只存在于内存中的一个位置，但是所有实例都可以访问它！")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_14-所有对象都有原型。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-所有对象都有原型。"}},[t._v("#")]),t._v(" 14. 所有对象都有原型。")]),t._v(" "),s("ul",[s("li",[t._v("A: 对")]),t._v(" "),s("li",[t._v("B: 错")])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("除了 "),s("strong",[t._v("基本对象")]),t._v("（ base object），所有对象都有原型。基本对象可以访问一些方法和属性，比如 "),s("code",[t._v(".toString")]),t._v("。这就是为什么你可以使用内置的 JavaScript 方法！所有这些方法在原型上都是可用的。虽然 JavaScript 不能直接在对象上找到这些方法，但 JavaScript 会沿着原型链找到它们，以便于你使用。")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_17-输出是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-输出是什么"}},[t._v("#")]),t._v(" 17. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPersonInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" three")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("three"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lydia'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\n\ngetPersonInfo"),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" is ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" years old")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v("21")]),t._v(" "),s("code",[t._v('["", " is ", " years old"]')])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v('["", " is ", " years old"]')]),t._v(" "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v("21")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v('["", " is ", " years old"]')]),t._v(" "),s("code",[t._v("21")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b-2"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("如果使用标记模板字面量，第一个参数的值总是包含字符串的数组。其余的参数获取的是传递的表达式的值！")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_29-输出是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-输出是什么"}},[t._v("#")]),t._v(" 29. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("123")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("456")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("ReferenceError")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b-3"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("对象的键被自动转换为字符串。我们试图将一个对象 "),s("code",[t._v("b")]),t._v(" 设置为对象 "),s("code",[t._v("a")]),t._v(" 的键，且相应的值为 "),s("code",[t._v("123")]),t._v("。")]),t._v(" "),s("p",[t._v("然而，当字符串化一个对象时，它会变成 "),s("code",[t._v('"[object Object]"')]),t._v("。因此这里说的是，"),s("code",[t._v('a["[object Object]"] = 123')]),t._v("。然后，我们再一次做了同样的事情，"),s("code",[t._v("c")]),t._v(" 是另外一个对象，这里也有隐式字符串化，于是，"),s("code",[t._v('a["[object Object]"] = 456')]),t._v("。")]),t._v(" "),s("p",[t._v("然后，我们打印 "),s("code",[t._v("a[b]")]),t._v("，也就是 "),s("code",[t._v('a["[object Object]"]')]),t._v("。之前刚设置为 "),s("code",[t._v("456")]),t._v("，因此返回的是 "),s("code",[t._v("456")]),t._v("。")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_63-输出是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_63-输出是什么"}},[t._v("#")]),t._v(" 63. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increaseNumber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increasePassedNumber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increaseNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increasePassedNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("10")]),t._v(", "),s("code",[t._v("10")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("10")]),t._v(", "),s("code",[t._v("11")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("11")]),t._v(", "),s("code",[t._v("11")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("11")]),t._v(", "),s("code",[t._v("12")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-a-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-a-3"}},[t._v("#")]),t._v(" 答案： A")]),t._v(" "),s("p",[t._v("一元操作符 "),s("code",[t._v("++")]),t._v(" _ 先返回 _ 操作值，_ 再累加 _ 操作值。"),s("code",[t._v("num1")]),t._v(" 的值是 "),s("code",[t._v("10")]),t._v("，因为 "),s("code",[t._v("increaseNumber")]),t._v(" 函数首先返回 "),s("code",[t._v("num")]),t._v(" 的值，也就是 "),s("code",[t._v("10")]),t._v("，随后再进行 "),s("code",[t._v("num")]),t._v(" 的累加。")]),t._v(" "),s("p",[s("code",[t._v("num2")]),t._v(" 是 "),s("code",[t._v("10")]),t._v(" 因为我们将 "),s("code",[t._v("num1")]),t._v(" 传入 "),s("code",[t._v("increasePassedNumber")]),t._v(". "),s("code",[t._v("number")]),t._v(" 等于 "),s("code",[t._v("10")]),t._v("（"),s("code",[t._v("num1")]),t._v(" 的值。同样道理，"),s("code",[t._v("++")]),t._v(" _ 先返回 _ 操作值，_ 再累加 _ 操作值。）"),s("code",[t._v("number")]),t._v(" 是 "),s("code",[t._v("10")]),t._v("，所以 "),s("code",[t._v("num2")]),t._v(" 也是 "),s("code",[t._v("10")]),t._v(".")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_101-输出什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_101-输出什么"}},[t._v("#")]),t._v(" 101. 输出什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" two "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" three "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" three"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("false")]),t._v(" "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("[]")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("{}")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("[]")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("true")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-c"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-c"}},[t._v("#")]),t._v(" 答案： C")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("||")]),t._v(" 运算符，我们可以返回第一个真值。如果所有值都是假值，则返回最后一个值。")]),t._v(" "),s("p",[s("code",[t._v("（false || {} || null）")]),t._v("：空对象 "),s("code",[t._v("{}")]),t._v(" 是一个真值。这是第一个（也是唯一的）真值，它将被返回。"),s("code",[t._v("one")]),t._v(" 等于 "),s("code",[t._v("{}")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("（null || false ||“”）")]),t._v("：所有值都是假值。这意味着返回传递的值 "),s("code",[t._v('""')]),t._v("。"),s("code",[t._v("two")]),t._v(" 等于 "),s("code",[t._v('""')]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("（[] || 0 ||“”）")]),t._v("：空数组 "),s("code",[t._v("[]")]),t._v(" 是一个真值。这是第一个返回的真值。"),s("code",[t._v("three")]),t._v(" 等于 "),s("code",[t._v("[]")]),t._v("。")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"答案-a-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-a-4"}},[t._v("#")]),t._v(" 答案： A")]),t._v(" "),s("p",[t._v("你不能像常规对象那样，给构造函数添加属性。如果你想一次性给所有实例添加特性，你应该使用原型。因此本例中，使用如下方式：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getFullName")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这才会使 "),s("code",[t._v("member.getFullName()")]),t._v(" 起作用。为什么这么做有益的？假设我们将这个方法添加到构造函数本身里。也许不是每个 "),s("code",[t._v("Person")]),t._v(" 实例都需要这个方法。这将浪费大量内存空间，因为它们仍然具有该属性，这将占用每个实例的内存空间。相反，如果我们只将它添加到原型中，那么它只存在于内存中的一个位置，但是所有实例都可以访问它！")]),t._v(" "),s("p"),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_14-所有对象都有原型。-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-所有对象都有原型。-2"}},[t._v("#")]),t._v(" 14. 所有对象都有原型。")]),t._v(" "),s("ul",[s("li",[t._v("A: 对")]),t._v(" "),s("li",[t._v("B: 错")])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b-4"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("除了 "),s("strong",[t._v("基本对象")]),t._v("（ base object），所有对象都有原型。基本对象可以访问一些方法和属性，比如 "),s("code",[t._v(".toString")]),t._v("。这就是为什么你可以使用内置的 JavaScript 方法！所有这些方法在原型上都是可用的。虽然 JavaScript 不能直接在对象上找到这些方法，但 JavaScript 会沿着原型链找到它们，以便于你使用。")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_17-输出是什么-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-输出是什么-2"}},[t._v("#")]),t._v(" 17. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPersonInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" three")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("three"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lydia'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\n\ngetPersonInfo"),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" is ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" years old")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v("21")]),t._v(" "),s("code",[t._v('["", " is ", " years old"]')])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v('["", " is ", " years old"]')]),t._v(" "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v("21")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v('["", " is ", " years old"]')]),t._v(" "),s("code",[t._v("21")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b-5"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("如果使用标记模板字面量，第一个参数的值总是包含字符串的数组。其余的参数获取的是传递的表达式的值！")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_29-输出是什么-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-输出是什么-2"}},[t._v("#")]),t._v(" 29. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("123")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("456")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("ReferenceError")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b-6"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("对象的键被自动转换为字符串。我们试图将一个对象 "),s("code",[t._v("b")]),t._v(" 设置为对象 "),s("code",[t._v("a")]),t._v(" 的键，且相应的值为 "),s("code",[t._v("123")]),t._v("。")]),t._v(" "),s("p",[t._v("然而，当字符串化一个对象时，它会变成 "),s("code",[t._v('"[object Object]"')]),t._v("。因此这里说的是，"),s("code",[t._v('a["[object Object]"] = 123')]),t._v("。然后，我们再一次做了同样的事情，"),s("code",[t._v("c")]),t._v(" 是另外一个对象，这里也有隐式字符串化，于是，"),s("code",[t._v('a["[object Object]"] = 456')]),t._v("。")]),t._v(" "),s("p",[t._v("然后，我们打印 "),s("code",[t._v("a[b]")]),t._v("，也就是 "),s("code",[t._v('a["[object Object]"]')]),t._v("。之前刚设置为 "),s("code",[t._v("456")]),t._v("，因此返回的是 "),s("code",[t._v("456")]),t._v("。")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_63-输出是什么-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_63-输出是什么-2"}},[t._v("#")]),t._v(" 63. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increaseNumber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increasePassedNumber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increaseNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increasePassedNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("10")]),t._v(", "),s("code",[t._v("10")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("10")]),t._v(", "),s("code",[t._v("11")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("11")]),t._v(", "),s("code",[t._v("11")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("11")]),t._v(", "),s("code",[t._v("12")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-a-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-a-5"}},[t._v("#")]),t._v(" 答案： A")]),t._v(" "),s("p",[t._v("一元操作符 "),s("code",[t._v("++")]),t._v(" _ 先返回 _ 操作值，_ 再累加 _ 操作值。"),s("code",[t._v("num1")]),t._v(" 的值是 "),s("code",[t._v("10")]),t._v("，因为 "),s("code",[t._v("increaseNumber")]),t._v(" 函数首先返回 "),s("code",[t._v("num")]),t._v(" 的值，也就是 "),s("code",[t._v("10")]),t._v("，随后再进行 "),s("code",[t._v("num")]),t._v(" 的累加。")]),t._v(" "),s("p",[s("code",[t._v("num2")]),t._v(" 是 "),s("code",[t._v("10")]),t._v(" 因为我们将 "),s("code",[t._v("num1")]),t._v(" 传入 "),s("code",[t._v("increasePassedNumber")]),t._v(". "),s("code",[t._v("number")]),t._v(" 等于 "),s("code",[t._v("10")]),t._v("（"),s("code",[t._v("num1")]),t._v(" 的值。同样道理，"),s("code",[t._v("++")]),t._v(" _ 先返回 _ 操作值，_ 再累加 _ 操作值。）"),s("code",[t._v("number")]),t._v(" 是 "),s("code",[t._v("10")]),t._v("，所以 "),s("code",[t._v("num2")]),t._v(" 也是 "),s("code",[t._v("10")]),t._v(".")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_101-输出什么-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_101-输出什么-2"}},[t._v("#")]),t._v(" 101. 输出什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" two "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" three "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" three"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("false")]),t._v(" "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("[]")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("{}")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("[]")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("true")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-c-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-c-2"}},[t._v("#")]),t._v(" 答案： C")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("||")]),t._v(" 运算符，我们可以返回第一个真值。如果所有值都是假值，则返回最后一个值。")]),t._v(" "),s("p",[s("code",[t._v("（false || {} || null）")]),t._v("：空对象 "),s("code",[t._v("{}")]),t._v(" 是一个真值。这是第一个（也是唯一的）真值，它将被返回。"),s("code",[t._v("one")]),t._v(" 等于 "),s("code",[t._v("{}")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("（null || false ||“”）")]),t._v("：所有值都是假值。这意味着返回传递的值 "),s("code",[t._v('""')]),t._v("。"),s("code",[t._v("two")]),t._v(" 等于 "),s("code",[t._v('""')]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("（[] || 0 ||“”）")]),t._v("：空数组 "),s("code",[t._v("[]")]),t._v(" 是一个真值。这是第一个返回的真值。"),s("code",[t._v("three")]),t._v(" 等于 "),s("code",[t._v("[]")]),t._v("。")]),t._v(" "),s("p")]),t._v(" "),s("p",[t._v("---输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increaseNumber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increasePassedNumber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increaseNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increasePassedNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("10")]),t._v(", "),s("code",[t._v("10")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("10")]),t._v(", "),s("code",[t._v("11")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("11")]),t._v(", "),s("code",[t._v("11")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("11")]),t._v(", "),s("code",[t._v("12")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-a-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-a-6"}},[t._v("#")]),t._v(" 答案： A")]),t._v(" "),s("p",[t._v("一元操作符 "),s("code",[t._v("++")]),t._v(" _ 先返回 _ 操作值，_ 再累加 _ 操作值。"),s("code",[t._v("num1")]),t._v(" 的值是 "),s("code",[t._v("10")]),t._v("，因为 "),s("code",[t._v("increaseNumber")]),t._v(" 函数首先返回 "),s("code",[t._v("num")]),t._v(" 的值，也就是 "),s("code",[t._v("10")]),t._v("，随后再进行 "),s("code",[t._v("num")]),t._v(" 的累加。")]),t._v(" "),s("p",[s("code",[t._v("num2")]),t._v(" 是 "),s("code",[t._v("10")]),t._v(" 因为我们将 "),s("code",[t._v("num1")]),t._v(" 传入 "),s("code",[t._v("increasePassedNumber")]),t._v(". "),s("code",[t._v("number")]),t._v(" 等于 "),s("code",[t._v("10")]),t._v("（"),s("code",[t._v("num1")]),t._v(" 的值。同样道理，"),s("code",[t._v("++")]),t._v(" _ 先返回 _ 操作值，_ 再累加 _ 操作值。）"),s("code",[t._v("number")]),t._v(" 是 "),s("code",[t._v("10")]),t._v("，所以 "),s("code",[t._v("num2")]),t._v(" 也是 "),s("code",[t._v("10")]),t._v(".")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_101-输出什么-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_101-输出什么-3"}},[t._v("#")]),t._v(" 101. 输出什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" two "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" three "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" three"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("false")]),t._v(" "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("[]")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("{}")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("[]")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("true")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-c-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-c-3"}},[t._v("#")]),t._v(" 答案： C")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("||")]),t._v(" 运算符，我们可以返回第一个真值。如果所有值都是假值，则返回最后一个值。")]),t._v(" "),s("p",[s("code",[t._v("（false || {} || null）")]),t._v("：空对象 "),s("code",[t._v("{}")]),t._v(" 是一个真值。这是第一个（也是唯一的）真值，它将被返回。"),s("code",[t._v("one")]),t._v(" 等于 "),s("code",[t._v("{}")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("（null || false ||“”）")]),t._v("：所有值都是假值。这意味着返回传递的值 "),s("code",[t._v('""')]),t._v("。"),s("code",[t._v("two")]),t._v(" 等于 "),s("code",[t._v('""')]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("（[] || 0 ||“”）")]),t._v("：空数组 "),s("code",[t._v("[]")]),t._v(" 是一个真值。这是第一个返回的真值。"),s("code",[t._v("three")]),t._v(" 等于 "),s("code",[t._v("[]")]),t._v("。")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"答案-a-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-a-7"}},[t._v("#")]),t._v(" 答案： A")]),t._v(" "),s("p",[t._v("你不能像常规对象那样，给构造函数添加属性。如果你想一次性给所有实例添加特性，你应该使用原型。因此本例中，使用如下方式：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getFullName")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这才会使 "),s("code",[t._v("member.getFullName()")]),t._v(" 起作用。为什么这么做有益的？假设我们将这个方法添加到构造函数本身里。也许不是每个 "),s("code",[t._v("Person")]),t._v(" 实例都需要这个方法。这将浪费大量内存空间，因为它们仍然具有该属性，这将占用每个实例的内存空间。相反，如果我们只将它添加到原型中，那么它只存在于内存中的一个位置，但是所有实例都可以访问它！")]),t._v(" "),s("p"),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_14-所有对象都有原型。-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-所有对象都有原型。-3"}},[t._v("#")]),t._v(" 14. 所有对象都有原型。")]),t._v(" "),s("ul",[s("li",[t._v("A: 对")]),t._v(" "),s("li",[t._v("B: 错")])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b-7"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("除了 "),s("strong",[t._v("基本对象")]),t._v("（ base object），所有对象都有原型。基本对象可以访问一些方法和属性，比如 "),s("code",[t._v(".toString")]),t._v("。这就是为什么你可以使用内置的 JavaScript 方法！所有这些方法在原型上都是可用的。虽然 JavaScript 不能直接在对象上找到这些方法，但 JavaScript 会沿着原型链找到它们，以便于你使用。")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_17-输出是什么-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-输出是什么-3"}},[t._v("#")]),t._v(" 17. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPersonInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" three")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("three"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lydia'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\n\ngetPersonInfo"),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" is ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" years old")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v("21")]),t._v(" "),s("code",[t._v('["", " is ", " years old"]')])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v('["", " is ", " years old"]')]),t._v(" "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v("21")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v('"Lydia"')]),t._v(" "),s("code",[t._v('["", " is ", " years old"]')]),t._v(" "),s("code",[t._v("21")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b-8"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("如果使用标记模板字面量，第一个参数的值总是包含字符串的数组。其余的参数获取的是传递的表达式的值！")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_29-输出是什么-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-输出是什么-3"}},[t._v("#")]),t._v(" 29. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("123")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("456")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("undefined")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("ReferenceError")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-b-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-b-9"}},[t._v("#")]),t._v(" 答案： B")]),t._v(" "),s("p",[t._v("对象的键被自动转换为字符串。我们试图将一个对象 "),s("code",[t._v("b")]),t._v(" 设置为对象 "),s("code",[t._v("a")]),t._v(" 的键，且相应的值为 "),s("code",[t._v("123")]),t._v("。")]),t._v(" "),s("p",[t._v("然而，当字符串化一个对象时，它会变成 "),s("code",[t._v('"[object Object]"')]),t._v("。因此这里说的是，"),s("code",[t._v('a["[object Object]"] = 123')]),t._v("。然后，我们再一次做了同样的事情，"),s("code",[t._v("c")]),t._v(" 是另外一个对象，这里也有隐式字符串化，于是，"),s("code",[t._v('a["[object Object]"] = 456')]),t._v("。")]),t._v(" "),s("p",[t._v("然后，我们打印 "),s("code",[t._v("a[b]")]),t._v("，也就是 "),s("code",[t._v('a["[object Object]"]')]),t._v("。之前刚设置为 "),s("code",[t._v("456")]),t._v("，因此返回的是 "),s("code",[t._v("456")]),t._v("。")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_63-输出是什么-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_63-输出是什么-3"}},[t._v("#")]),t._v(" 63. 输出是什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increaseNumber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increasePassedNumber")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increaseNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increasePassedNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("10")]),t._v(", "),s("code",[t._v("10")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("10")]),t._v(", "),s("code",[t._v("11")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("11")]),t._v(", "),s("code",[t._v("11")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("11")]),t._v(", "),s("code",[t._v("12")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-a-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-a-8"}},[t._v("#")]),t._v(" 答案： A")]),t._v(" "),s("p",[t._v("一元操作符 "),s("code",[t._v("++")]),t._v(" _ 先返回 _ 操作值，_ 再累加 _ 操作值。"),s("code",[t._v("num1")]),t._v(" 的值是 "),s("code",[t._v("10")]),t._v("，因为 "),s("code",[t._v("increaseNumber")]),t._v(" 函数首先返回 "),s("code",[t._v("num")]),t._v(" 的值，也就是 "),s("code",[t._v("10")]),t._v("，随后再进行 "),s("code",[t._v("num")]),t._v(" 的累加。")]),t._v(" "),s("p",[s("code",[t._v("num2")]),t._v(" 是 "),s("code",[t._v("10")]),t._v(" 因为我们将 "),s("code",[t._v("num1")]),t._v(" 传入 "),s("code",[t._v("increasePassedNumber")]),t._v(". "),s("code",[t._v("number")]),t._v(" 等于 "),s("code",[t._v("10")]),t._v("（"),s("code",[t._v("num1")]),t._v(" 的值。同样道理，"),s("code",[t._v("++")]),t._v(" _ 先返回 _ 操作值，_ 再累加 _ 操作值。）"),s("code",[t._v("number")]),t._v(" 是 "),s("code",[t._v("10")]),t._v("，所以 "),s("code",[t._v("num2")]),t._v(" 也是 "),s("code",[t._v("10")]),t._v(".")]),t._v(" "),s("p")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_101-输出什么-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_101-输出什么-4"}},[t._v("#")]),t._v(" 101. 输出什么？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" two "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" three "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" three"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("A: "),s("code",[t._v("false")]),t._v(" "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("[]")])]),t._v(" "),s("li",[t._v("B: "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("true")])]),t._v(" "),s("li",[t._v("C: "),s("code",[t._v("{}")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("[]")])]),t._v(" "),s("li",[t._v("D: "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("null")]),t._v(" "),s("code",[t._v("true")])])]),t._v(" "),s("details",[s("summary",[s("b",[t._v(" 答案 ")])]),t._v(" "),s("p"),s("h3",{attrs:{id:"答案-c-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案-c-4"}},[t._v("#")]),t._v(" 答案： C")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("||")]),t._v(" 运算符，我们可以返回第一个真值。如果所有值都是假值，则返回最后一个值。")]),t._v(" "),s("p",[s("code",[t._v("（false || {} || null）")]),t._v("：空对象 "),s("code",[t._v("{}")]),t._v(" 是一个真值。这是第一个（也是唯一的）真值，它将被返回。"),s("code",[t._v("one")]),t._v(" 等于 "),s("code",[t._v("{}")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("（null || false ||“”）")]),t._v("：所有值都是假值。这意味着返回传递的值 "),s("code",[t._v('""')]),t._v("。"),s("code",[t._v("two")]),t._v(" 等于 "),s("code",[t._v('""')]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("（[] || 0 ||“”）")]),t._v("：空数组 "),s("code",[t._v("[]")]),t._v(" 是一个真值。这是第一个返回的真值。"),s("code",[t._v("three")]),t._v(" 等于 "),s("code",[t._v("[]")]),t._v("。")]),t._v(" "),s("p")]),t._v(" "),s("hr")])}),[],!1,null,null,null);s.default=e.exports}}]);